// <auto-generated />
using System;
using MiBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MiBackend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250116203318_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MiBackend.Models.Combo", b =>
                {
                    b.Property<int>("ComboId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("combo_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ComboId"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<bool>("EstaActivo")
                        .HasColumnType("boolean")
                        .HasColumnName("esta_activo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<decimal>("Precio")
                        .HasColumnType("numeric")
                        .HasColumnName("precio");

                    b.Property<DateTime>("UltimaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ultima_actualizacion");

                    b.HasKey("ComboId");

                    b.HasIndex("EstaActivo");

                    b.ToTable("combos", t =>
                        {
                            t.HasCheckConstraint("CK_Combo_Precio", "\"Precio\" >= 0");
                        });
                });

            modelBuilder.Entity("MiBackend.Models.ComboDetalle", b =>
                {
                    b.Property<int>("ComboDetalleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("combo_detalle_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("ComboDetalleId"));

                    b.Property<decimal>("CantidadLibras")
                        .HasColumnType("numeric")
                        .HasColumnName("cantidad_libras");

                    b.Property<int>("ComboId")
                        .HasColumnType("integer")
                        .HasColumnName("combo_id");

                    b.Property<int>("ProductoId")
                        .HasColumnType("integer")
                        .HasColumnName("producto_id");

                    b.HasKey("ComboDetalleId")
                        .HasName("combo_detalles_pkey");

                    b.HasIndex("ProductoId");

                    b.HasIndex("ComboId", "ProductoId");

                    b.ToTable("combo_detalles", (string)null);
                });

            modelBuilder.Entity("MiBackend.Models.Producto", b =>
                {
                    b.Property<int>("ProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("producto_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductoId"));

                    b.Property<decimal>("CantidadLibras")
                        .HasColumnType("numeric")
                        .HasColumnName("cantidad_libras");

                    b.Property<bool>("EstaActivo")
                        .HasColumnType("boolean")
                        .HasColumnName("esta_activo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre");

                    b.Property<decimal>("PrecioPorLibra")
                        .HasColumnType("numeric")
                        .HasColumnName("precio_por_libra");

                    b.Property<string>("TipoEmpaque")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo_empaque");

                    b.Property<DateTime>("UltimaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ultima_actualizacion");

                    b.HasKey("ProductoId");

                    b.HasIndex("EstaActivo");

                    b.ToTable("productos", t =>
                        {
                            t.HasCheckConstraint("CK_Producto_CantidadLibras", "\"CantidadLibras\" >= 0");

                            t.HasCheckConstraint("CK_Producto_PrecioPorLibra", "\"PrecioPorLibra\" >= 0");
                        });
                });

            modelBuilder.Entity("MiBackend.Models.Venta", b =>
                {
                    b.Property<int>("VentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("venta_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VentaId"));

                    b.Property<string>("Cliente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cliente");

                    b.Property<DateTime>("FechaVenta")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_venta");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("observaciones");

                    b.Property<string>("TipoVenta")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("tipo_venta");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("monto_total");

                    b.Property<DateTime?>("UltimaActualizacion")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ultima_actualizacion");

                    b.HasKey("VentaId");

                    b.HasIndex("FechaVenta");

                    b.ToTable("ventas");
                });

            modelBuilder.Entity("MiBackend.Models.VentaDetalle", b =>
                {
                    b.Property<int>("VentaDetalleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("detalle_venta_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VentaDetalleId"));

                    b.Property<decimal>("CantidadLibras")
                        .HasColumnType("numeric")
                        .HasColumnName("cantidad_libras");

                    b.Property<int?>("ComboId")
                        .HasColumnType("integer")
                        .HasColumnName("combo_id");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("numeric")
                        .HasColumnName("precio_unitario");

                    b.Property<int?>("ProductoId")
                        .HasColumnType("integer")
                        .HasColumnName("producto_id");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("numeric")
                        .HasColumnName("subtotal");

                    b.Property<string>("TipoItem")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("tipo_item");

                    b.Property<int>("VentaId")
                        .HasColumnType("integer")
                        .HasColumnName("venta_id");

                    b.HasKey("VentaDetalleId");

                    b.HasIndex("ComboId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("VentaId", "TipoItem");

                    b.ToTable("venta_detalles", t =>
                        {
                            t.HasCheckConstraint("CK_VentaDetalle_TipoItem", "(tipo_item = 'PRODUCTO' AND producto_id IS NOT NULL AND combo_id IS NULL) OR (tipo_item = 'COMBO' AND combo_id IS NOT NULL AND producto_id IS NULL)");
                        });
                });

            modelBuilder.Entity("MiBackend.Models.ComboDetalle", b =>
                {
                    b.HasOne("MiBackend.Models.Combo", "Combo")
                        .WithMany("ComboDetalles")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiBackend.Models.Producto", "Producto")
                        .WithMany("ComboDetalles")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("MiBackend.Models.VentaDetalle", b =>
                {
                    b.HasOne("MiBackend.Models.Combo", "Combo")
                        .WithMany("VentaDetalles")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MiBackend.Models.Producto", "Producto")
                        .WithMany("VentaDetalles")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MiBackend.Models.Venta", "Venta")
                        .WithMany("VentaDetalles")
                        .HasForeignKey("VentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Producto");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("MiBackend.Models.Combo", b =>
                {
                    b.Navigation("ComboDetalles");

                    b.Navigation("VentaDetalles");
                });

            modelBuilder.Entity("MiBackend.Models.Producto", b =>
                {
                    b.Navigation("ComboDetalles");

                    b.Navigation("VentaDetalles");
                });

            modelBuilder.Entity("MiBackend.Models.Venta", b =>
                {
                    b.Navigation("VentaDetalles");
                });
#pragma warning restore 612, 618
        }
    }
}
